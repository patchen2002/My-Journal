{"ast":null,"code":"import Axios from 'axios';\nimport { POST_FAIL, POST_ONE_FAIL, POST_ONE_REQUEST, POST_ONE_SUCCESS, POST_REQUEST, POST_SUCCESS } from '../constants/postConstants';\nexport const newPost = (senderEmail, textBody, title, shared) => async dispatch => {\n  dispatch({\n    type: POST_ONE_REQUEST,\n    payload: {\n      senderEmail,\n      textBody,\n      title,\n      shared\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post('http://localhost:3000/api/posts/', {\n      senderEmail,\n      textBody,\n      title,\n      shared\n    });\n    dispatch({\n      type: POST_ONE_SUCCESS,\n      payload: data\n    });\n    console.log(\"new\");\n  } catch (error) {\n    dispatch({\n      type: POST_ONE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getPost = id => async dispatch => {\n  dispatch({\n    type: POST_ONE_REQUEST,\n    payload: {\n      id\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post('http://localhost:3000/api/posts/get', {\n      id\n    });\n    localStorage.setItem(\"foundPost\", JSON.stringify(data));\n    dispatch({\n      type: POST_ONE_SUCCESS,\n      payload: data\n    });\n    console.log(\"get\");\n  } catch (error) {\n    dispatch({\n      type: POST_ONE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getAllPosts = email => async dispatch => {\n  dispatch({\n    type: POST_REQUEST,\n    payload: {\n      email\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"http://localhost:3000/api/posts/user\", {\n      email\n    });\n    dispatch({\n      type: POST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const patchPost = (_id, senderEmail, textBody, title, shared) => async dispatch => {\n  dispatch({\n    type: POST_ONE_REQUEST,\n    payload: {\n      senderEmail,\n      textBody,\n      title,\n      shared\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.patch(`http://localhost:3000/api/posts/${_id}`, {\n      senderEmail,\n      textBody,\n      title,\n      shared\n    });\n    dispatch({\n      type: POST_ONE_SUCCESS,\n      payload: data\n    });\n    console.log(\"patch\");\n  } catch (error) {\n    dispatch({\n      type: POST_ONE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/patch/PROJECTS/Online_Journal/frontend/src/actions/postActions.js"],"names":["Axios","POST_FAIL","POST_ONE_FAIL","POST_ONE_REQUEST","POST_ONE_SUCCESS","POST_REQUEST","POST_SUCCESS","newPost","senderEmail","textBody","title","shared","dispatch","type","payload","data","post","console","log","error","response","message","getPost","id","localStorage","setItem","JSON","stringify","getAllPosts","email","patchPost","_id","patch"],"mappings":"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","sourcesContent":["import Axios from 'axios';\r\nimport { POST_FAIL, POST_ONE_FAIL, POST_ONE_REQUEST, POST_ONE_SUCCESS, POST_REQUEST, POST_SUCCESS } from '../constants/postConstants';\r\n\r\nexport const newPost = (senderEmail, textBody, title, shared) => async (dispatch) => {\r\n    dispatch({ type: POST_ONE_REQUEST, payload: { senderEmail, textBody, title, shared } });\r\n    try {\r\n        const { data } = await Axios.post('http://localhost:3000/api/posts/', { senderEmail, textBody, title, shared });\r\n        dispatch({ type: POST_ONE_SUCCESS, payload: data });\r\n        console.log(\"new\")\r\n    } catch (error) {\r\n        dispatch({\r\n            type: POST_ONE_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n        });\r\n    }\r\n};\r\n\r\nexport const getPost = (id) => async (dispatch) => {\r\n    dispatch({ type: POST_ONE_REQUEST, payload: { id } });\r\n    try {\r\n        const { data } = await Axios.post('http://localhost:3000/api/posts/get', { id });\r\n        localStorage.setItem(\"foundPost\", JSON.stringify(data));\r\n        dispatch({ type: POST_ONE_SUCCESS, payload: data });\r\n        console.log(\"get\")\r\n    } catch (error) {\r\n        dispatch({\r\n            type: POST_ONE_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n        });\r\n    }\r\n};\r\n\r\nexport const getAllPosts = (email) => async (dispatch) => {\r\n    dispatch({ type: POST_REQUEST, payload: { email } });\r\n    try {\r\n        const { data } = await Axios.post(\"http://localhost:3000/api/posts/user\", { email });\r\n        dispatch({ type: POST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: POST_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n        });\r\n    }\r\n};\r\n\r\nexport const patchPost = (_id, senderEmail, textBody, title, shared) => async (dispatch) => {\r\n    dispatch({ type: POST_ONE_REQUEST, payload: { senderEmail, textBody, title, shared } });\r\n    try {\r\n        const { data } = await Axios.patch(`http://localhost:3000/api/posts/${_id}`, { senderEmail, textBody, title, shared });\r\n        dispatch({ type: POST_ONE_SUCCESS, payload: data });\r\n        console.log(\"patch\")\r\n    } catch (error) {\r\n        dispatch({\r\n            type: POST_ONE_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n        });\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}