{"ast":null,"code":"import Axios from 'axios';\nimport { POST_FAIL, POST_REQUEST, POST_SUCCESS } from '../constants/postConstants';\nexport const post = (senderEmail, textBody, title, shared) => async dispatch => {\n  dispatch({\n    type: POST_REQUEST,\n    payload: {\n      senderEmail,\n      textBody,\n      title,\n      shared\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post('http://localhost:3000/api/posts/', {\n      senderEmail,\n      textBody,\n      title,\n      shared\n    });\n    dispatch({\n      type: POST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getPost = _id => async dispatch => {\n  dispatch({\n    type: POST_REQUEST,\n    payload: {\n      _id\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get('http://localhost:3000/api/posts/', {\n      _id\n    });\n    dispatch({\n      type: POST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getAllPosts = email => async dispatch => {\n  dispatch({\n    type: POST_REQUEST,\n    payload: {\n      email\n    }\n  });\n\n  try {\n    console.log(email);\n    const {\n      data\n    } = await Axios.post(\"http://localhost:3000/api/posts/user\", {\n      email\n    });\n    console.log(data);\n    dispatch({\n      type: POST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/patch/PROJECTS/Online_Journal/frontend/src/actions/postActions.js"],"names":["Axios","POST_FAIL","POST_REQUEST","POST_SUCCESS","post","senderEmail","textBody","title","shared","dispatch","type","payload","data","error","response","message","getPost","_id","get","getAllPosts","email","console","log"],"mappings":"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","sourcesContent":["import Axios from 'axios';\r\nimport { POST_FAIL, POST_REQUEST, POST_SUCCESS } from '../constants/postConstants';\r\n\r\nexport const post = (senderEmail, textBody, title, shared) => async (dispatch) => {\r\n    dispatch({ type: POST_REQUEST, payload: { senderEmail, textBody, title, shared } });\r\n    try {\r\n        const { data } = await Axios.post('http://localhost:3000/api/posts/', { senderEmail, textBody, title, shared });\r\n        dispatch({ type: POST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: POST_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n        });\r\n    }\r\n};\r\n\r\nexport const getPost = (_id) => async (dispatch) => {\r\n    dispatch({ type: POST_REQUEST, payload: { _id } });\r\n    try {\r\n        const { data } = await Axios.get('http://localhost:3000/api/posts/', { _id });\r\n        dispatch({ type: POST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: POST_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n        });\r\n    }\r\n};\r\n\r\nexport const getAllPosts = (email) => async (dispatch) => {\r\n    dispatch({ type: POST_REQUEST, payload: { email } });\r\n    try {\r\n        console.log(email);\r\n        const { data } = await Axios.post(\"http://localhost:3000/api/posts/user\", { email });\r\n        console.log(data);\r\n        dispatch({ type: POST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: POST_FAIL,\r\n            payload:\r\n                error.response && error.response.data.message\r\n                    ? error.response.data.message\r\n                    : error.message\r\n        });\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}